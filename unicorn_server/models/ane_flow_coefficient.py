# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ANEFlowCoefficient(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, flow_id: int=None, coefficient: float=None):
        """
        ANEFlowCoefficient - a model defined in Swagger

        :param flow_id: The flow_id of this ANEFlowCoefficient.
        :type flow_id: int
        :param coefficient: The coefficient of this ANEFlowCoefficient.
        :type coefficient: float
        """
        self.swagger_types = {
            'flow_id': int,
            'coefficient': float
        }

        self.attribute_map = {
            'flow_id': 'flow-id',
            'coefficient': 'coefficient'
        }

        self._flow_id = flow_id
        self._coefficient = coefficient

    @classmethod
    def from_dict(cls, dikt) -> 'ANEFlowCoefficient':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ANEFlowCoefficient of this ANEFlowCoefficient.
        :rtype: ANEFlowCoefficient
        """
        return deserialize_model(dikt, cls)

    @property
    def flow_id(self) -> int:
        """
        Gets the flow_id of this ANEFlowCoefficient.

        :return: The flow_id of this ANEFlowCoefficient.
        :rtype: int
        """
        return self._flow_id

    @flow_id.setter
    def flow_id(self, flow_id: int):
        """
        Sets the flow_id of this ANEFlowCoefficient.

        :param flow_id: The flow_id of this ANEFlowCoefficient.
        :type flow_id: int
        """
        if flow_id is None:
            raise ValueError("Invalid value for `flow_id`, must not be `None`")

        self._flow_id = flow_id

    @property
    def coefficient(self) -> float:
        """
        Gets the coefficient of this ANEFlowCoefficient.

        :return: The coefficient of this ANEFlowCoefficient.
        :rtype: float
        """
        return self._coefficient

    @coefficient.setter
    def coefficient(self, coefficient: float):
        """
        Sets the coefficient of this ANEFlowCoefficient.

        :param coefficient: The coefficient of this ANEFlowCoefficient.
        :type coefficient: float
        """

        self._coefficient = coefficient

