---
swagger: "2.0"
info:
  version: "0.1.0"
  title: "Example Unicorn Server (An ALTO Extension)"
  contact:
    name: "SNLab.Org"
    url: "https://snlab.github.io/"
    email: "snlab.org@gmail.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
basePath: "/v1/unicorn"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /ext/query/path:
    post:
      description: "Make a recursive path query"
      operationId: "query_path"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "query_set"
        required: true
        schema:
          type: "array"
          description: "each item provides the specifications of a flow and from where\
            \ it will enter the current domain.\n"
          items:
            $ref: "#/definitions/QueryDesc"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/PathQueryResponse"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "unicorn_server.controllers.{{ controller }}"
  /ext/query/resource:
    post:
      description: "Returns resource state abstraction in simple mode"
      operationId: "query_resource"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "query_set"
        required: true
        schema:
          type: "array"
          description: "each item provides the specifications of a flow and from where\
            \ it will enter the current domain.\n"
          items:
            $ref: "#/definitions/QueryDesc"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ResourceQueryResponse"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "unicorn_server.controllers.{{ controller }}"
definitions:
  QueryDesc:
    type: "object"
    required:
    - "flow"
    - "ingress-point"
    properties:
      flow:
        $ref: "#/definitions/FlowSpec"
      ingress-point:
        type: "string"
        pattern: "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|$"
        x-regex: "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|$"
        x-modifiers: []
    example:
      flow:
        dst-ip: "192.168.1.100"
        src-ip: "192.168.2.100"
        dst-port: 54321
        protocol: "tcp"
      ingress-point: ""
  FlowSpec:
    type: "object"
    required:
    - "dst-ip"
    properties:
      src-ip:
        type: "string"
        pattern: "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|$"
        x-regex: "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|$"
        x-modifiers: []
      dst-ip:
        type: "string"
        pattern: "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|$"
        x-regex: "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|$"
        x-modifiers: []
      src-port:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 65535
      dst-port:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 65535
      protocol:
        type: "string"
        enum:
        - "tcp"
        - "udp"
        - "sctp"
  PathQueryResponse:
    type: "array"
    items:
      type: "string"
      pattern: "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|$"
    example:
    - "172.18.0.3"
    - "172.18.0.4"
  Error:
    properties:
      meta:
        $ref: "#/definitions/Error_meta"
  ResourceQueryResponse:
    type: "object"
    required:
    - "ane-matrix"
    - "anes"
    properties:
      ane-matrix:
        type: "array"
        items:
          type: "array"
          items:
            $ref: "#/definitions/ANEFlowCoefficient"
      anes:
        type: "array"
        items:
          $ref: "#/definitions/ANE"
    example:
      ane-matrix:
      - - flowid: 1
          coefficient: 0.5
        - flowid: 2
          coefficient: 1
      - - flowid: 1
          coefficient: 0.5
      anes:
      - availbw: 1000000
      - availbw: 700000
  ANE:
    type: "object"
    required:
    - "availbw"
    properties:
      availbw:
        type: "integer"
        format: "int32"
    example:
      availbw: 1000000
  ANEFlowCoefficient:
    type: "object"
    required:
    - "flow-id"
    properties:
      flow-id:
        type: "integer"
        format: "int32"
      coefficient:
        type: "number"
        format: "double"
    example:
      flow-id: 0
      coefficient: 0.5
  Error_meta:
    required:
    - "code"
    properties:
      code:
        type: "string"
        enum:
        - "E_SYNTAX"
        - "E_MISSING_FIELD"
        - "E_INVALID_FIELD_TYPE"
        - "E_INVALID_FIELD_VALUE"
        - "E_UNKNOWN"
      message:
        type: "string"
        description: "Provides the details of the error"
